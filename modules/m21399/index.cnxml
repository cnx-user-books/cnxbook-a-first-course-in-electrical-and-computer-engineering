<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Binary Codes: From Symbols to Binary Codes</title>
  <metadata>
  <md:content-id>m21399</md:content-id><md:title>Binary Codes: From Symbols to Binary Codes</md:title>
  <md:abstract/>
  <md:uuid>cffc6b16-b811-4c86-a4fd-ca7eae17735d</md:uuid>
</metadata>

<content>
    <note id="eip-323">This module is part of the collection, <emphasis effect="italics">A First Course in Electrical and Computer Engineering</emphasis>. The LaTeX source files for this collection were created using an optical character recognition technology, and because of this process there may be more errors than usual. Please contact us if you discover any errors.
</note><para id="id2258268">Perhaps the most fundamental idea in communication theory is that arbitrary symbols may be represented by strings of binary digits. These strings are called binary words, binary addresses, or binary codes. In the simplest of cases, a finite alphabet consisting of the letters or symbols <m:math overflow="scroll"><m:mrow><m:msub><m:mi>s</m:mi><m:mn>0</m:mn></m:msub><m:mo>,</m:mo><m:msub><m:mi>s</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo><m:mo>...</m:mo><m:mo>,</m:mo><m:msub><m:mi>s</m:mi><m:mrow><m:mi>M</m:mi><m:mo>-</m:mo><m:mn>1</m:mn></m:mrow></m:msub></m:mrow></m:math> is represented by binary codes. The obvious way to implement the representation is to let the <m:math overflow="scroll"><m:msup><m:mi>i</m:mi><m:mrow><m:mi mathvariant="normal">t</m:mi><m:mi mathvariant="normal">h</m:mi></m:mrow></m:msup></m:math> binary code be the binary representation for the subscript <m:math>
<m:mi>i</m:mi>
</m:math>:</para>
    
    <equation id="id2259000"><m:math overflow="scroll" mode="display">
<m:mtable>
<m:mtr>
<m:mtd>
          <m:msub>
            <m:mi>s</m:mi>
            <m:mn>0</m:mn>
          </m:msub>
          <m:mo>∼</m:mo>
          <m:mn>000</m:mn>
</m:mtd>
<m:mtd>       
   <m:mo>=</m:mo>
</m:mtd>
<m:mtd>       
   <m:msub>
            <m:mi>a</m:mi>
            <m:mn>0</m:mn>
          </m:msub>
    </m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
          <m:msub>
            <m:mi>s</m:mi>
            <m:mn>1</m:mn>
          </m:msub>
          <m:mo>∼</m:mo>
          <m:mn>001</m:mn>
</m:mtd>
<m:mtd>
          <m:mo>=</m:mo>
</m:mtd>
<m:mtd>       
   <m:msub>
            <m:mi>a</m:mi>
            <m:mn>1</m:mn>
          </m:msub>
    </m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
<m:mo>⋮</m:mo>
</m:mtd>
<m:mtd/>
<m:mtd/>
</m:mtr>
<m:mtr>
<m:mtd>
          <m:msub>
            <m:mi>s</m:mi>
            <m:mn>6</m:mn>
          </m:msub>
          <m:mo>∼</m:mo>
          <m:mn>110</m:mn>
</m:mtd>
<m:mtd>
          <m:mo>=</m:mo>
</m:mtd>
<m:mtd>       
   <m:msub>
            <m:mi>a</m:mi>
            <m:mn>6</m:mn>
          </m:msub>
       </m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
          <m:msub>
            <m:mi>s</m:mi>
            <m:mn>7</m:mn>
          </m:msub>
          <m:mo>∼</m:mo>
          <m:mn>111</m:mn>
</m:mtd>
<m:mtd>
          <m:mo>=</m:mo>
</m:mtd>
<m:mtd>       
   <m:msub>
            <m:mi>a</m:mi>
            <m:mn>7</m:mn>
          </m:msub>
          <m:mo>.</m:mo>
       </m:mtd>
</m:mtr>
</m:mtable>
</m:math></equation>
    
    
    
    
    <para id="id2259131">The number of bits required for the binary code is <m:math>
<m:mi>N</m:mi>
</m:math> where</para>
    
    <equation id="eip-564"><m:math overflow="scroll"><m:mrow><m:msup><m:mn>2</m:mn><m:mrow><m:mi>N</m:mi><m:mo>-</m:mo><m:mn>1</m:mn></m:mrow></m:msup><m:mo>&lt;</m:mo><m:mi>M</m:mi><m:mo>≤</m:mo><m:msup><m:mn>2</m:mn><m:mi>N</m:mi></m:msup></m:mrow><m:mo>.</m:mo></m:math></equation><para id="id2259183">We say, roughly, that <m:math overflow="scroll"><m:mrow><m:mi>N</m:mi><m:mo>=</m:mo><m:msub><m:mo form="prefix">log</m:mo><m:mn>2</m:mn></m:msub><m:mi>M</m:mi></m:mrow></m:math>.</para>
    <para id="id2259210"><emphasis effect="bold">Octal Codes.</emphasis> When the number of symbols is large and the corresponding binary codes contain many bits, then we typically group the bits into groups of three and replace the binary code by its corresponding octal code. For example, a seven-bit binary code maps into a three-digit octal code as follows:</para>
<equation id="fs-id4474088">    
      <m:math overflow="scroll">
<m:mtable>
<m:mtr>
<m:mtd>
          <m:mn>0000000</m:mn>
</m:mtd>
<m:mtd>       
   <m:mo>∼</m:mo>
</m:mtd>
<m:mtd>       
   <m:mn>000</m:mn>
</m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
     <m:mn>0000001</m:mn>
</m:mtd>
<m:mtd>       
   <m:mo>∼</m:mo>
</m:mtd>
<m:mtd>       
   <m:mn>001</m:mn>
</m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
<m:mo>⋮</m:mo>
</m:mtd>
<m:mtd/>
<m:mtd/>
</m:mtr>
<m:mtr>
<m:mtd>
          <m:mn>0100110</m:mn>
</m:mtd>
<m:mtd>       
   <m:mo>∼</m:mo>
</m:mtd>
<m:mtd>       
   <m:mn>046</m:mn>
</m:mtd>
</m:mtr>       
<m:mtr>
<m:mtd>
<m:mo>⋮</m:mo>
</m:mtd>
<m:mtd/>
<m:mtd/>
</m:mtr>
<m:mtr>
<m:mtd> 
          <m:mn>101111</m:mn>
</m:mtd>
<m:mtd>   
       <m:mo>∼</m:mo>
</m:mtd>
<m:mtd>
          <m:mn>137</m:mn>
</m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
<m:mo>⋮</m:mo>
</m:mtd>
<m:mtd/>
<m:mtd/>
</m:mtr>
<m:mtr>
<m:mtd>
  <m:mn>1111111</m:mn>
</m:mtd>
<m:mtd>       
   <m:mo>∼</m:mo>
</m:mtd>
<m:mtd>       
   <m:mn>177</m:mn>       
   <m:mo>.</m:mo>
</m:mtd>
</m:mtr>
</m:mtable>        
      </m:math>
    </equation>
    <para id="id2259324">The octal ASCII codes for representing letters, numbers, and special characters are tabulated in <link target-id="eip-635">Table 1</link>.</para>
<exercise id="fs-id19757837">
<problem id="fs-id19101225">
    <para id="id2259330">Write out the seven-bit ASCII codes for <m:math overflow="scroll"><m:mrow><m:mi>A</m:mi><m:mo>,</m:mo><m:mi>q</m:mi><m:mo>,</m:mo><m:mn>7</m:mn><m:mo>,</m:mo><m:mi>a</m:mi><m:mi>n</m:mi><m:mi>d</m:mi><m:mo>{</m:mo></m:mrow></m:math>.</para></problem>
</exercise>
    
<table id="eip-635" summary="ASCII 17 Rows, 9 Columns">
<tgroup cols="9"><tbody>
  <row>
    <entry/>
    <entry><emphasis effect="italics">'0</emphasis></entry>
    <entry><emphasis effect="italics">'1</emphasis></entry>
    <entry><emphasis effect="italics">'2</emphasis></entry>
    <entry><emphasis effect="italics">'3</emphasis></entry>
    <entry><emphasis effect="italics">'4</emphasis></entry>
    <entry><emphasis effect="italics">'5</emphasis></entry>
    <entry><emphasis effect="italics">'6</emphasis></entry>
    <entry><emphasis effect="italics">'7</emphasis></entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'00x</emphasis></entry>
    <entry>␀</entry>
    <entry>␁</entry>
    <entry>␂</entry>
    <entry>␃</entry>
    <entry>␄</entry>
    <entry>␅</entry>
    <entry>␆</entry>
    <entry>␇</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'01x</emphasis></entry>
    <entry>␈</entry>
    <entry>␉</entry>
    <entry>␊</entry>
    <entry>␋</entry>
    <entry>␌</entry>
    <entry>␍</entry>
    <entry>␎</entry>
    <entry>␏</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'02x</emphasis></entry>
    <entry>␐</entry>
    <entry>␑</entry>
    <entry>␒</entry>
    <entry>␓</entry>
    <entry>␔</entry>
    <entry>␕</entry>
    <entry>␖</entry>
    <entry>␗</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'03x</emphasis></entry>
    <entry>␘</entry>
    <entry>␙</entry>
    <entry>␚</entry>
    <entry>␛</entry>
    <entry>␜</entry>
    <entry>␝</entry>
    <entry>␞</entry>
    <entry>␟</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'04x</emphasis></entry>
    <entry>␠</entry>
    <entry>!</entry>
    <entry>"</entry>
    <entry>#</entry>
    <entry>$</entry>
    <entry>%</entry>
    <entry>&amp;</entry>
    <entry>'</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'05x</emphasis></entry>
    <entry>(</entry>
    <entry>)</entry>
    <entry>*</entry>
    <entry>+</entry>
    <entry>,</entry>
    <entry>-</entry>
    <entry>.</entry>
    <entry>/</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'06x</emphasis></entry>
    <entry>0</entry>
    <entry>1</entry>
    <entry>2</entry>
    <entry>3</entry>
    <entry>4</entry>
    <entry>5</entry>
    <entry>6</entry>
    <entry>7</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'07x</emphasis></entry>
    <entry>8</entry>
    <entry>9</entry>
    <entry>:</entry>
    <entry>;</entry>
    <entry>&lt;</entry>
    <entry>=</entry>
    <entry>&gt;</entry>
    <entry>?</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'10x</emphasis></entry>
    <entry>@</entry>
    <entry>A</entry>
    <entry>B</entry>
    <entry>C</entry>
    <entry>D</entry>
    <entry>E</entry>
    <entry>F</entry>
    <entry>G</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'11x</emphasis></entry>
    <entry>H</entry>
    <entry>I</entry>
    <entry>J</entry>
    <entry>K</entry>
    <entry>L</entry>
    <entry>M</entry>
    <entry>N</entry>
    <entry>O</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'12x</emphasis></entry>
    <entry>P</entry>
    <entry>Q</entry>
    <entry>R</entry>
    <entry>S</entry>
    <entry>T</entry>
    <entry>U</entry>
    <entry>V</entry>
    <entry>W</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'13x</emphasis></entry>
    <entry>X</entry>
    <entry>Y</entry>
    <entry>Z</entry>
    <entry>[</entry>
    <entry>\</entry>
    <entry>]</entry>
    <entry>^</entry>
    <entry>_</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'14x</emphasis></entry>
    <entry>`</entry>
    <entry>a</entry>
    <entry>b</entry>
    <entry>c</entry>
    <entry>d</entry>
    <entry>e</entry>
    <entry>f</entry>
    <entry>g</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'15x</emphasis></entry>
    <entry>h</entry>
    <entry>i</entry>
    <entry>j</entry>
    <entry>k</entry>
    <entry>l</entry>
    <entry>m</entry>
    <entry>n</entry>
    <entry>o</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'16x</emphasis></entry>
    <entry>p</entry>
    <entry>q</entry>
    <entry>r</entry>
    <entry>s</entry>
    <entry>t</entry>
    <entry>u</entry>
    <entry>v</entry>
    <entry>w</entry>
  </row>
  <row>
    <entry><emphasis effect="italics">'17x</emphasis></entry>
    <entry>x</entry>
    <entry>y</entry>
    <entry>z</entry>
    <entry>{</entry>
    <entry>|</entry>
    <entry>}</entry>
    <entry>~</entry>
    <entry>␡</entry>
  </row>
</tbody>

</tgroup><caption>Octal ASCII Codes (from Donald E. Knuth, <emphasis effect="italics">The TEXbook</emphasis>, ©1986 by the American Mathematical Society, Providence, Rhode Island p. 367, published by Addison-Wesley Publishing Co.)</caption>
</table><exercise id="fs-id19001764">
<problem id="fs-id19045405">
    <para id="id2259652">Add a 1 or a 0 to the most significant (left-most) position of the seven-bit ASCII code to produce an eight-bit code that has even parity (even number of 1's). Give the resulting eight-bit ASCII codes and the corresponding three-digit octal codes for %, <m:math overflow="scroll"><m:mi mathvariant="normal">u</m:mi><m:mo>,</m:mo><m:mi mathvariant="normal">f</m:mi><m:mo>,</m:mo><m:mn>8</m:mn><m:mo>,</m:mo></m:math>
and
<m:math><m:mo>+</m:mo></m:math>.</para></problem>
</exercise>
    <para id="id2259702"><emphasis effect="bold">Quantizers and A/D Converters.</emphasis> What if the source alphabet is infinite? Our only hope is to approximate it with a finite collection of finite binary words. For example, suppose the output of the source is an analog voltage that lies between <m:math overflow="scroll"><m:mo>-</m:mo><m:msub><m:mi>V</m:mi><m:mn>0</m:mn></m:msub></m:math>
and
<m:math><m:mo>+</m:mo><m:msub><m:mi>V</m:mi><m:mn>0</m:mn></m:msub></m:math>. We might break this peak-to-peak range up into little voltage cells of size <m:math overflow="scroll"><m:mstyle scriptlevel="0" displaystyle="true"><m:mrow><m:mfrac><m:mrow><m:mn>2</m:mn><m:mi>V</m:mi></m:mrow><m:mi>M</m:mi></m:mfrac><m:mi mathvariant="normal">A</m:mi></m:mrow></m:mstyle></m:math> and approximate the voltage in each cell by its midpoint. This scheme is illustrated in <link target-id="uid3">Figure 1</link>. In the figure,
the cell <m:math>
<m:msub>
<m:mi>C</m:mi>
<m:mi>i</m:mi>
</m:msub>
</m:math> is defined to be the set of voltages that fall between <m:math overflow="scroll"><m:msubsup><m:mi>i</m:mi><m:mrow><m:msup><m:mi>M</m:mi><m:mo>-</m:mo></m:msup><m:mover><m:mi>M</m:mi><m:mo>¯</m:mo></m:mover></m:mrow><m:mrow><m:munder><m:mn>2</m:mn><m:mo>̲</m:mo></m:munder><m:mi>V</m:mi><m:mi>p</m:mi><m:msub><m:mi>V</m:mi><m:mi>Δ</m:mi></m:msub></m:mrow></m:msubsup></m:math> and <m:math overflow="scroll"><m:mstyle scriptlevel="0" displaystyle="true"><m:mrow><m:msup><m:mi>i</m:mi><m:mrow><m:munder><m:mn>2</m:mn><m:mo>̲</m:mo></m:munder><m:mi>V</m:mi></m:mrow></m:msup><m:mi>M</m:mi><m:mi>Δ</m:mi><m:mo>+</m:mo><m:mfrac><m:mi>V</m:mi><m:mrow/></m:mfrac><m:msup><m:mi>M</m:mi><m:mi mathvariant="normal">A</m:mi></m:msup></m:mrow></m:mstyle></m:math> :</para>
    
    <equation id="eip-464"><m:math overflow="scroll"><m:mstyle scriptlevel="0" displaystyle="true"><m:mrow><m:msub><m:mi>C</m:mi><m:mi>i</m:mi></m:msub><m:mo>=</m:mo><m:mrow><m:mo>{</m:mo><m:mi>V</m:mi><m:mo>:</m:mo><m:mi>i</m:mi><m:mo>.</m:mo><m:mfrac><m:mrow><m:mn>2</m:mn><m:msub><m:mi>V</m:mi><m:mn>0</m:mn></m:msub></m:mrow><m:mi>M</m:mi></m:mfrac><m:mo>-</m:mo><m:mfrac><m:msub><m:mi>V</m:mi><m:mn>0</m:mn></m:msub><m:mi>M</m:mi></m:mfrac><m:mo>&lt;</m:mo><m:mi>V</m:mi><m:mo>≤</m:mo><m:mi>i</m:mi><m:mfrac><m:mrow><m:mn>2</m:mn><m:msub><m:mi>V</m:mi><m:mn>0</m:mn></m:msub></m:mrow><m:mi>M</m:mi></m:mfrac><m:mo>+</m:mo><m:mfrac><m:msub><m:mi>V</m:mi><m:mn>0</m:mn></m:msub><m:mi>M</m:mi></m:mfrac><m:mo>}</m:mo></m:mrow></m:mrow></m:mstyle><m:mo>.</m:mo></m:math></equation><para id="id2260002">The mapping from continuous values of <emphasis effect="italics">V</emphasis> to a finite set of approximations is</para>
    
    <equation id="eip-571"><m:math overflow="scroll"><m:mstyle scriptlevel="0" displaystyle="true"><m:mrow><m:mi>Q</m:mi><m:mrow><m:mo>(</m:mo><m:mi>V</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mi>i</m:mi><m:mfrac><m:mrow><m:mn>2</m:mn><m:msub><m:mi>V</m:mi><m:mn>0</m:mn></m:msub></m:mrow><m:mi>M</m:mi></m:mfrac></m:mrow></m:mstyle><m:mo>,</m:mo>
<m:mspace width="5pt"/>
<m:mtext>if</m:mtext>
<m:mspace width="5pt"/>
<m:mrow><m:mi>V</m:mi><m:mo>∈</m:mo><m:msub><m:mi>C</m:mi><m:mi>i</m:mi></m:msub></m:mrow><m:mo>.</m:mo></m:math></equation><para id="id2260076">That is, <m:math>
<m:mi>V</m:mi>
</m:math> is replaced by the quantized approximation <m:math overflow="scroll"><m:msubsup><m:mi>i</m:mi><m:mrow><m:mi>M</m:mi></m:mrow><m:mrow><m:munder><m:mn>2</m:mn><m:mo>̲</m:mo></m:munder><m:msub><m:mi>V</m:mi><m:mi>0</m:mi></m:msub></m:mrow></m:msubsup></m:math> whenever <m:math>
<m:mi>V</m:mi>
</m:math> lies in cell <m:math>
<m:msub>
<m:mi>C</m:mi>
<m:mi>i</m:mi>
</m:msub>
</m:math>. We may represent the quantized values <m:math overflow="scroll"><m:mrow><m:msubsup><m:mi>i</m:mi><m:mrow><m:mi>M</m:mi></m:mrow><m:mrow><m:munder><m:mn>2</m:mn><m:mo>̲</m:mo></m:munder><m:mi>V</m:mi></m:mrow></m:msubsup><m:mi>0</m:mi></m:mrow></m:math> with binary codes by simply representing the subscript of the cell by a binary word. In a subsequent course on digital electronics and microprocessors you will study <m:math overflow="scroll"><m:mrow><m:mi mathvariant="normal">A</m:mi><m:mo>/</m:mo><m:mi mathvariant="normal">D</m:mi></m:mrow></m:math> (analog-to-digital) converters for quantizing variables.</para>
    <figure id="uid3"><media id="uid3_media" alt="A graph showing four quadrants. The center is labeled cell C_0 and the farthest points of the x and y axes in each direction are V_0. In the upper left quadrant is the expression 2V_0/M with and arrow point to the left towards a vertical line and the mirror of this to the right of it. Below this is C_-2. In the upper right quadrant there is the expression 2V_0/M with a similar arrow line figure to its left. This one is vertical and to the left there is the expression C_2. Proceeding from the lower right to the upper left there is a series of horizontal lines stair stepping up in along a positive slope.">
        <image mime-type="image/png" src="../../media/pic004-05f5.png" id="uid3_onlineimage" width="500"><!-- NOTE: attribute width changes image size online (pixels). original width is 1950. --></image>
        <image for="pdf" mime-type="application/postscript" src="../../media/pic004-2e69.eps" id="uid3_printimage" print-width="3.5in">
<!--NOTE: attribute width changes image size in printed PDF (if specified in .tex file)-->
        </image>
      </media>
      
    <caption>A Quantizer</caption></figure>
<example id="fs-id11109930"><para id="id2260208">If <m:math overflow="scroll"><m:mrow><m:mi>M</m:mi><m:mo>=</m:mo><m:mn>8</m:mn></m:mrow></m:math>, corresponding to a three-bit quantizer, we
may associate quantizer cells and quantized levels with binary codes as follows:</para>

    <equation id="id2260232">
      <m:math overflow="scroll" mode="display">
<m:mtable>
<m:mtr>
<m:mtd>
          <m:mi>V</m:mi>
          <m:mo>∈</m:mo>
          <m:msub>
            <m:mi>C</m:mi>
            <m:mrow>
              <m:mo>-</m:mo>
              <m:mn>3</m:mn>
            </m:mrow>
          </m:msub>
       </m:mtd>
<m:mtd>
   <m:mo>⇒</m:mo>
</m:mtd>
<m:mtd>
          <m:msub>
            <m:mi>V</m:mi>
            <m:mrow>
              <m:mo>-</m:mo>
              <m:mn>3</m:mn>
            </m:mrow>
          </m:msub>
          <m:mo>=</m:mo>
          <m:mrow>
            <m:mo>(</m:mo>
            <m:mo>-</m:mo>
            <m:mn>3</m:mn>
            <m:mo>)</m:mo>
          </m:mrow>
          <m:mfrac>
            <m:mrow>
              <m:mn>2</m:mn>
              <m:msub>
                <m:mi>V</m:mi>
                <m:mn>0</m:mn>
              </m:msub>
            </m:mrow>
            <m:mn>8</m:mn>
          </m:mfrac>
          <m:mo>∼</m:mo>
          <m:mn>111</m:mn>
  </m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
          <m:mi>V</m:mi>
          <m:mo>∈</m:mo>
          <m:msub>
            <m:mi>C</m:mi>
            <m:mrow>
              <m:mo>-</m:mo>
              <m:mn>2</m:mn>
            </m:mrow>
          </m:msub>
</m:mtd>
<m:mtd>       
   <m:mo>⇒</m:mo>
</m:mtd>
<m:mtd>        
  <m:msub>
            <m:mi>V</m:mi>
            <m:mrow>
              <m:mo>-</m:mo>
              <m:mn>2</m:mn>
            </m:mrow>
          </m:msub>
          <m:mo>=</m:mo>
          <m:mrow>
            <m:mo>(</m:mo>
            <m:mo>-</m:mo>
            <m:mn>2</m:mn>
            <m:mo>)</m:mo>
          </m:mrow>
          <m:mfrac>
            <m:mrow>
              <m:mn>2</m:mn>
              <m:msub>
                <m:mi>V</m:mi>
                <m:mn>0</m:mn>
              </m:msub>
            </m:mrow>
            <m:mn>8</m:mn>
          </m:mfrac>
          <m:mo>∼</m:mo>
          <m:mn>110</m:mn>
</m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>    
      <m:mi>V</m:mi>
          <m:mo>∈</m:mo>
          <m:msub>
            <m:mi>C</m:mi>
            <m:mrow>
              <m:mo>-</m:mo>
              <m:mn>1</m:mn>
            </m:mrow>
          </m:msub>
</m:mtd>
<m:mtd>       
          <m:mo>⇒</m:mo>
</m:mtd>
<m:mtd>       
   <m:msub>
            <m:mi>V</m:mi>
            <m:mrow>
              <m:mo>-</m:mo>
              <m:mn>1</m:mn>
            </m:mrow>
          </m:msub>
          <m:mo>=</m:mo>
          <m:mrow>
            <m:mo>(</m:mo>
            <m:mo>-</m:mo>
            <m:mn>1</m:mn>
            <m:mo>)</m:mo>
          </m:mrow>
          <m:mfrac>
            <m:mrow>
              <m:mn>2</m:mn>
              <m:msub>
                <m:mi>V</m:mi>
                <m:mn>0</m:mn>
              </m:msub>
            </m:mrow>
            <m:mn>8</m:mn>
          </m:mfrac>
          <m:mo>∼</m:mo>
          <m:mn>101</m:mn>
        </m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>    
      <m:mi>V</m:mi>
          <m:mo>∈</m:mo>
          <m:msub>
            <m:mi>C</m:mi>
            <m:mn>0</m:mn>
          </m:msub>
</m:mtd>
<m:mtd>       
   <m:mo>⇒</m:mo>
</m:mtd>
<m:mtd>       
   <m:msub>
            <m:mi>V</m:mi>
            <m:mn>0</m:mn>
          </m:msub>
          <m:mo>=</m:mo>
          <m:mn>0</m:mn>
          <m:mo>∼</m:mo>
          <m:mn>000</m:mn>
        </m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
          <m:mi>V</m:mi>
          <m:mo>∈</m:mo>
          <m:msub>
            <m:mi>C</m:mi>
            <m:mn>1</m:mn>
          </m:msub>
</m:mtd>
<m:mtd>    
      <m:mo>⇒</m:mo>
</m:mtd>
<m:mtd>
          <m:msub>
            <m:mi>V</m:mi>
            <m:mn>1</m:mn>
          </m:msub>
          <m:mo>=</m:mo>
          <m:mrow>
            <m:mo>(</m:mo>
            <m:mn>1</m:mn>
            <m:mo>)</m:mo>
          </m:mrow>
          <m:mfrac>
            <m:mrow>
              <m:mn>2</m:mn>
              <m:msub>
                <m:mi>V</m:mi>
                <m:mn>0</m:mn>
              </m:msub>
            </m:mrow>
            <m:mn>8</m:mn>
          </m:mfrac>
          <m:mo>∼</m:mo>
          <m:mn>001</m:mn>
   </m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
          <m:mi>V</m:mi>
          <m:mo>∈</m:mo>
          <m:msub>
            <m:mi>C</m:mi>
            <m:mn>2</m:mn>
          </m:msub>
</m:mtd>
<m:mtd>       
   <m:mo>⇒</m:mo>
</m:mtd>
<m:mtd>       
   <m:msub>
            <m:mi>V</m:mi>
            <m:mn>2</m:mn>
          </m:msub>
          <m:mo>=</m:mo>
          <m:mrow>
            <m:mo>(</m:mo>
            <m:mn>2</m:mn>
            <m:mo>)</m:mo>
          </m:mrow>
          <m:mfrac>
            <m:mrow>
              <m:mn>2</m:mn>
              <m:msub>
                <m:mi>V</m:mi>
                <m:mn>0</m:mn>
              </m:msub>
            </m:mrow>
            <m:mn>8</m:mn>
          </m:mfrac>
          <m:mo>∼</m:mo>
          <m:mn>010</m:mn>
</m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
  <m:mi>V</m:mi>
          <m:mo>∈</m:mo>
          <m:msub>
            <m:mi>C</m:mi>
            <m:mn>3</m:mn>
          </m:msub>
</m:mtd>
<m:mtd> 
         <m:mo>⇒</m:mo>
</m:mtd>
<m:mtd>       
   <m:msub>
            <m:mi>V</m:mi>
            <m:mn>3</m:mn>
          </m:msub>
          <m:mo>=</m:mo>
          <m:mrow>
            <m:mo>(</m:mo>
            <m:mn>3</m:mn>
            <m:mo>)</m:mo>
          </m:mrow>
          <m:mfrac>
            <m:mrow>
              <m:mn>2</m:mn>
              <m:msub>
                <m:mi>V</m:mi>
                <m:mn>0</m:mn>
              </m:msub>
            </m:mrow>
            <m:mn>8</m:mn>
          </m:mfrac>
          <m:mo>∼</m:mo>
          <m:mn>011</m:mn>
          <m:mo>.</m:mo>
        </m:mtd>
</m:mtr>
</m:mtable>
      </m:math>
    </equation>
    <para id="id2260694">This particular code is called a <emphasis effect="italics">sign-magnitude code</emphasis>, wherein the most significant bit is a sign bit and the remaining bits are magnitude bits (e.g., <m:math overflow="scroll"><m:mrow><m:mn>110</m:mn><m:mo>∼</m:mo><m:mo>-</m:mo><m:mn>2</m:mn></m:mrow></m:math> and <m:math overflow="scroll"><m:mrow><m:mn>010</m:mn><m:mo>∼</m:mo><m:mn>2</m:mn></m:mrow></m:math>). One of the defects of the sign-magnitude code is that it wastes one code by using 000 for 0 and 100 for-O. An alternative code that has many other advantages is the 2's <emphasis effect="italics">complement code</emphasis>. The <m:math overflow="scroll"><m:mrow><m:msup><m:mn>2</m:mn><m:mo>'</m:mo></m:msup><m:mi mathvariant="normal">s</m:mi></m:mrow></m:math> complement codes for positive numbers are the same as the sign-magnitude codes, but the codes for negative numbers are generated by complementing all bits for the corresponding positive number and adding 1:</para>
    
<equation id="eip-id11707261">
      <m:math overflow="scroll">
<m:mtable>
<m:mtr>
<m:mtd>       
          <m:mo>-</m:mo>
          <m:mn>4</m:mn>
          <m:mo>∼</m:mo>
          <m:mn>100</m:mn>
        </m:mtd>
<m:mtd/>
</m:mtr>
<m:mtr>
<m:mtd>      
    <m:mo>-</m:mo>
          <m:mn>3</m:mn>
          <m:mo>∼</m:mo>
          <m:mn>101</m:mn>
       </m:mtd>
<m:mtd>       
   <m:mo>(</m:mo>
          <m:mn>100</m:mn>
          <m:mo>+</m:mo>
          <m:mn>1</m:mn>
          <m:mo>)</m:mo>
    </m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
  <m:mo>-</m:mo>
          <m:mn>2</m:mn>
          <m:mo>∼</m:mo>
          <m:mn>110</m:mn>
          <m:mspace width="4.pt"/>
</m:mtd>
<m:mtd>        
  <m:mo>(</m:mo>
          <m:mn>101</m:mn>
          <m:mo>+</m:mo>
          <m:mn>1</m:mn>
          <m:mo>)</m:mo>
       </m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>    
      <m:mo>-</m:mo>
          <m:mn>1</m:mn>
          <m:mo>∼</m:mo>
          <m:mn>111</m:mn>
</m:mtd>
<m:mtd>       
   <m:mo>(</m:mo>
          <m:mn>110</m:mn>
          <m:mo>+</m:mo>
          <m:mn>1</m:mn>
          <m:mo>)</m:mo>
        </m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
          <m:mn>0</m:mn>
          <m:mo>∼</m:mo>
          <m:mn>000</m:mn>
</m:mtd>
<m:mtd/>
</m:mtr>
<m:mtr>       
<m:mtd>
          <m:mn>1</m:mn>
          <m:mo>∼</m:mo>
          <m:mn>001</m:mn>
</m:mtd>
<m:mtd/>
</m:mtr>
<m:mtr>
<m:mtd>    
      <m:mn>2</m:mn>
          <m:mo>∼</m:mo>
          <m:mn>010</m:mn>
</m:mtd>
<m:mtd/>
</m:mtr>
<m:mtr>
<m:mtd>       
          <m:mn>3</m:mn>
          <m:mo>∼</m:mo>
          <m:mn>011</m:mn>
          <m:mo>.</m:mo>
</m:mtd>
<m:mtd/>
</m:mtr>
</m:mtable>
      </m:math>
    </equation>
</example>
<exercise id="fs-id19072251">
<problem id="fs-id19072254">
    <para id="id2260950">Generate the four-bit sign-magnitude and four-bit 2's complement binary codes for the numbers <m:math overflow="scroll"><m:mrow><m:mo>-</m:mo><m:mn>8</m:mn><m:mo>,</m:mo><m:mo>-</m:mo><m:mn>7</m:mn><m:mo>,</m:mo><m:mo>...</m:mo><m:mo>,</m:mo><m:mo>-</m:mo><m:mn>1</m:mn><m:mo>,</m:mo><m:mn>0</m:mn><m:mo>,</m:mo><m:mn>1</m:mn><m:mo>,</m:mo><m:mn>2</m:mn><m:mo>,</m:mo><m:mo>...</m:mo><m:mo>,</m:mo><m:mn>7</m:mn></m:mrow></m:math>.</para></problem>
</exercise>
<exercise id="fs-id16816993">
<problem id="fs-id16816995">
    <para id="id2261031">Prove that, in the <m:math overflow="scroll"><m:mrow><m:msup><m:mn>2</m:mn><m:mo>'</m:mo></m:msup><m:mi mathvariant="normal">s</m:mi></m:mrow></m:math> complement representation, the binary
codes for <m:math overflow="scroll"><m:mrow><m:mo>-</m:mo><m:mi>n</m:mi><m:mi mathvariant="normal">a</m:mi><m:mi mathvariant="normal">n</m:mi><m:mi mathvariant="normal">d</m:mi><m:mo>+</m:mo><m:mi>n</m:mi></m:mrow></m:math> sum to zero. For example,</para>
    <equation id="id2261100"><m:math overflow="scroll" mode="display">
<m:mtable>
<m:mtr>
<m:mtd>
        <m:mrow>
          <m:mn>101</m:mn>
          <m:mo>+</m:mo>
          <m:mn>011</m:mn>
          <m:mo>=</m:mo>
          <m:mn>000</m:mn>
        </m:mrow>
      </m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
        <m:mrow>
          <m:mo>(</m:mo>
          <m:mo>-</m:mo>
          <m:mn>3</m:mn>
          <m:mo>)</m:mo>
          <m:mspace width="4.pt"/>
          <m:mo>(</m:mo>
          <m:mn>3</m:mn>
          <m:mo>)</m:mo>
          <m:mspace width="4.pt"/>
          <m:mo>(</m:mo>
          <m:mn>0</m:mn>
          <m:mo>)</m:mo>
          <m:mo>.</m:mo>
          <m:mspace width="4.pt"/>
        </m:mrow>
</m:mtd>
</m:mtr>
</m:mtable>
</m:math>
    </equation>
    </problem>
</exercise>
    <para id="id2261162">In your courses on computer arithmetic you will learn how to do arithmetic in various binary-coded systems. The following problem illustrates how easy arithmetic is in 2's complement.</para>
<exercise id="fs-id20420318">
<problem id="fs-id20420320">
    <para id="id2261190">Generate a table of sums for all <m:math overflow="scroll"><m:mrow><m:msup><m:mn>2</m:mn><m:mo>'</m:mo></m:msup><m:mi mathvariant="normal">s</m:mi></m:mrow></m:math> complement numbers between <m:math overflow="scroll"><m:mrow><m:mo>-</m:mo><m:mn>4</m:mn></m:mrow></m:math> and +3. Show that the sums are correct. Use <m:math overflow="scroll"><m:mrow><m:mn>0</m:mn><m:mo>+</m:mo><m:mn>0</m:mn><m:mo>=</m:mo><m:mn>0</m:mn><m:mo>,</m:mo><m:mn>0</m:mn><m:mo>+</m:mo><m:mn>1</m:mn><m:mo>=</m:mo><m:mn>1</m:mn><m:mo>,</m:mo><m:mn>1</m:mn><m:mo>+</m:mo><m:mn>0</m:mn><m:mo>=</m:mo><m:mn>1</m:mn></m:mrow></m:math>, and <m:math overflow="scroll"><m:mrow><m:mn>1</m:mn><m:mo>+</m:mo><m:mn>1</m:mn><m:mo>=</m:mo><m:mn>0</m:mn></m:mrow></m:math> with a carry into the next bit. For example, <m:math overflow="scroll"><m:mrow><m:mn>001</m:mn><m:mo>+</m:mo><m:mn>001</m:mn><m:mo>=</m:mo><m:mn>010</m:mn><m:mo>.</m:mo></m:mrow></m:math></para></problem>
</exercise>
    <para id="id2261312"><emphasis effect="bold">Binary Trees and Variable-Length Codes.</emphasis> The codes we have constructed so far are constant-length codes for finite alphabets that contain exactly <m:math overflow="scroll"><m:mrow><m:mi>M</m:mi><m:mo>=</m:mo><m:msup><m:mn>2</m:mn><m:mi>N</m:mi></m:msup></m:mrow></m:math> symbols. In the case where <m:math overflow="scroll"><m:mrow><m:mi>M</m:mi><m:mo>=</m:mo><m:mn>8</m:mn></m:mrow></m:math> and <m:math overflow="scroll"><m:mrow><m:mi>N</m:mi><m:mo>=</m:mo><m:mn>3</m:mn></m:mrow></m:math>, then the eight possible three-bit codes may be represented as leaves on the branching tree illustrated in <link target-id="uid5">Figure 2(a)</link>. The tree grows a left branch for a 0 and a right branch for a 1, until it terminates after three branchings. The three-bit codes we have studied so far reside at the terminating leaves of the binary tree. But what if our source alphabet contains just five symbols or letters? We can represent these five symbols as the three-bit symbols 000 through 100 on the binary tree. This generates a constant-length code with three unused, or illegal, symbols 101 through 111. These are marked with an "<m:math>
<m:mi>x</m:mi>
</m:math>" in <link target-id="uid5">Figure 2(a)</link>. These unused leaves and the branches leading to them may be pruned to produce the binary tree of <link target-id="uid5">Figure 2(b)</link>.</para>
    <para id="id2261391">If we admit variable-length codes, then we have several other options for using a binary tree to construct binary codes. Two of these codes and their corresponding binary trees are illustrated in <link target-id="uid7">Figure 3</link>. If we disabuse ourselves of the notion that each code word must contain three or fewer bits, then we may construct binary trees like those of <link target-id="uid9">Figure 4</link> and generate their corresponding binary codes. In <link target-id="uid9">Figure 4(a)</link>, we grow a right branch after each left branch and label each leaf with a code word. In <link target-id="uid9">Figure 4(b)</link>, we prune off the last right branch and associatea code word with the leaf on the last left branch.</para>
    
    <figure id="uid5"><subfigure id="eip-id9940537">
<media id="uid4_media" alt="A pair of binary trees. The one to the right is a normal binary tree. The upper leve is labeled 0 and 1. The level below it is slit with the branches labeled from left to right 0, 1, 0, 1. Below that the final level of branches is labeled from left to right 0, 1, 0, 1, 0, 1, 0, 1. The bottom layer is labeled from left to right 000, 001, 010, 011, 100, 101, 110, 111. Below these numbers are the labels (S_0),(S_1),(S_2),(S_3),(s_4),(x),(x),(x),(x). The tree on the right is exactly the same exactly the same except the right most 1 branch has been pruned off.">
        <image mime-type="image/png" src="../../media/image008-35aa.png" id="uid4_onlineimage" width="500"><!-- NOTE: attribute width changes image size online (pixels). original width is 2250. --></image>
        <image for="pdf" mime-type="application/postscript" src="../../media/image008-1e22.eps" id="uid4_printimage" print-width="25.25mm">
<!--NOTE: attribute width changes image size in printed PDF (if specified in .tex file)-->
        </image>
      </media>
    </subfigure>


<subfigure id="eip-id10172000">
<media id="uid5_media" alt="">
        <image mime-type="image/png" src="../../media/image009-bd88.png" id="uid5_onlineimage" width="500"><!-- NOTE: attribute width changes image size online (pixels). original width is 1757. --></image>
        <image for="pdf" mime-type="application/postscript" src="../../media/image009-3c27.eps" id="uid5_printimage" print-width="25.38mm">
<!--NOTE: attribute width changes image size in printed PDF (if specified in .tex file)-->
        </image>
      </media>
      
    </subfigure><caption>Binary Trees and Constant-Length Codes; (a) Binary Tree, and
(b) Pruned Binary Tree</caption></figure>
    <para id="id2261434">All of the codes we have generated so far are organized in <link target-id="eip-497">Table 2</link>. For each code, the average number of bits/symbol is tabulated. This average ranges from 2.4 to 3.0. If all symbols are equally likely to appear, then the best variable-length code would be code 2.</para>
    
    <figure id="uid7"><subfigure id="eip-id13136959">
<media id="uid6_media" alt="A pair of binary trees. The one to the right is a normal binary tree. The upper leve is labeled 0 and 1. The level below it is slit with the branches labeled from left to right 0, 1, 0, 1. Below that the final level of branches is labeled from left to right 0, 1, 0, 1, 0, 1, 0, 1. The bottom layer is labeled from left to right 000, 001, 010, 011, 100, 101, 110, 111. Below these numbers are the labels (S_0),(S_1),(S_2),(S_3),(s_4),(x),(x),(x),(x). The tree on the right is exactly the same exactly the same except the right most 1 branch has been pruned off.">
        <image mime-type="image/png" src="../../media/pic005-de13.png" id="uid6_onlineimage" width="500"><!-- NOTE: attribute width changes image size online (pixels). original width is 2115. --></image>
        <image for="pdf" mime-type="application/postscript" src="../../media/pic005-380f.eps" id="uid6_printimage" print-width="3.5mm">
<!--NOTE: attribute width changes image size in printed PDF (if specified in .tex file)-->
        </image>
      </media>
    </subfigure>


<subfigure id="eip-id8517964">
<media id="uid7_media" alt="">
        <image mime-type="image/png" src="../../media/pic006-d311.png" id="uid7_onlineimage" width="500"><!-- NOTE: attribute width changes image size online (pixels). original width is 1813. --></image>
        <image for="pdf" mime-type="application/postscript" src="../../media/pic006-b0c0.eps" id="uid7_printimage" print-width="3.5mm">
<!--NOTE: attribute width changes image size in printed PDF (if specified in .tex file)-->
        </image>
      </media>
      
    </subfigure><caption>Binary Trees and Variable-Length Codes; (a) Binary Tree for Variable-length Code, and (b) Another Binary Tree for Variable-length Code</caption></figure>
    <para id="id2261472">All of the codes we have constructed have a common characteristic: each code word is a terminating leaf on a binary tree, meaning that no code word lies along a limb of branches to another code word. We say that no code word is a <emphasis effect="italics">prefix</emphasis> to another code word. This property makes each of the codes <emphasis effect="italics">instantaneously decodable</emphasis>, meaning that each bit in a string of bits may be processed instantaneously (or independently) without dependence on subsequent bits.</para>
<exercise id="fs-id20065173">
<problem id="fs-id6648113">
    <para id="id2261493">Decode the following sequence of bits using code 2:</para>
    <equation id="id2261502">
      <m:math overflow="scroll" mode="display">
        <m:mrow>
          <m:mn>0111001111000000101100111</m:mn>
          <m:mo>.</m:mo>
        </m:mrow>
      </m:math>
    </equation></problem>
</exercise>
    
    <figure id="uid9"><subfigure id="eip-id16887753">
<media id="uid8_media" alt="Two binary trees. They are shaped like a diagonal line rising up and to the right with lines descending perpendicularly at equal distances marked by a dot. The lines between these dots are labeled 0, and the lines between the beginning and end of the perpendicular lines are labeled 1. At end of each of the perpedicular lines are these labels proceeding up and to the right: 00001, 0001, 001, 01, 1. Below these labels are another set of labels again proceeding up and to the right: (S_4), (S_3), (S_2), (S_1), (S_0). The right tree is exactly the same except for the bottom most perpendicular line has been pruned and is labeled 0000 and (S_4).">
        <image mime-type="image/png" src="../../media/pic009-9cfc.png" id="uid8_onlineimage" width="500"><!-- NOTE: attribute width changes image size online (pixels). original width is 1176. --></image>
        <image for="pdf" mime-type="application/postscript" src="../../media/pic009-6f1e.eps" id="uid8_printimage" print-width="3.5mm">
<!--NOTE: attribute width changes image size in printed PDF (if specified in .tex file)-->
        </image>
      </media>
    </subfigure>

<subfigure id="eip-id12367992">
<media id="uid9_media" alt="">
        <image mime-type="image/png" src="../../media/pic010-823b.png" id="uid9_onlineimage" width="500"><!-- NOTE: attribute width changes image size online (pixels). original width is 1276. --></image>
        <image for="pdf" mime-type="application/postscript" src="../../media/pic010-f0ca.eps" id="uid9_printimage" print-width="3.5in">
<!--NOTE: attribute width changes image size in printed PDF (if specified in .tex file)-->
        </image>
      </media>
      
    </subfigure><caption>Left-Handed Binary Trees for Variable-Length Codes; (a) Left-handed Binary Tree, and (b) Pruned Binary Tree</caption></figure>
    
    <table id="eip-497" summary="lengths of various length codes">
<tgroup cols="7"><thead>
<row>
<entry>Code #</entry>
<entry><m:math>
<m:msub>
<m:mi>S</m:mi>
<m:mn>0</m:mn>
</m:msub>
</m:math></entry>
<entry><m:math>
<m:msub>
<m:mi>S</m:mi>
<m:mn>1</m:mn>
</m:msub>
</m:math></entry>
<entry><m:math>
<m:msub>
<m:mi>S</m:mi>
<m:mn>2</m:mn>
</m:msub>
</m:math></entry>
<entry><m:math>
<m:msub>
<m:mi>S</m:mi>
<m:mn>3</m:mn>
</m:msub>
</m:math></entry>
<entry><m:math>
<m:msub>
<m:mi>S</m:mi>
<m:mn>4</m:mn>
</m:msub>
</m:math></entry>
<entry>Average Bits/Symbol</entry>
</row>
</thead>


<tbody>
  <row>
    <entry>1</entry>
    <entry>000</entry>
    <entry>001</entry>
    <entry>010</entry>
    <entry>011</entry>
    <entry>100</entry>
    <entry><m:math>
<m:mn>15</m:mn>
<m:mo>/</m:mo>
<m:mn>5</m:mn>
<m:mo>=</m:mo>
<m:mn>3.0</m:mn>
</m:math></entry>
  </row>
  <row>
    <entry>2</entry>
    <entry>000</entry>
    <entry>001</entry>
    <entry>01</entry>
    <entry>10</entry>
    <entry>11</entry>
    <entry><m:math>
<m:mn>12</m:mn>
<m:mo>/</m:mo>
<m:mn>5</m:mn>
<m:mo>=</m:mo>
<m:mn>2.4</m:mn>
</m:math></entry>
  </row>
  <row>
    <entry>3</entry>
    <entry>000</entry>
    <entry>001</entry>
    <entry>010</entry>
    <entry>011</entry>
    <entry>1</entry>
    <entry><m:math>
<m:mn>13</m:mn>
<m:mo>/</m:mo>
<m:mn>5</m:mn>
<m:mo>=</m:mo>
<m:mn>2.6</m:mn>
</m:math></entry>
  </row>
  <row>
    <entry>4</entry>
    <entry>1</entry>
    <entry>01</entry>
    <entry>001</entry>
    <entry>0001</entry>
    <entry>00001</entry>
    <entry><m:math>
<m:mn>15</m:mn>
<m:mo>/</m:mo>
<m:mn>5</m:mn>
<m:mo>=</m:mo>
<m:mn>3.0</m:mn>
</m:math></entry>
  </row>
  <row>
    <entry>5</entry>
    <entry>1</entry>
    <entry>01</entry>
    <entry>001</entry>
    <entry>0001</entry>
    <entry>0000</entry>
    <entry><m:math>
<m:mn>14</m:mn>
<m:mo>/</m:mo>
<m:mn>5</m:mn>
<m:mo>=</m:mo>
<m:mn>2.8</m:mn>
</m:math></entry>
  </row>
</tbody>

</tgroup><caption>Variable Length Codes</caption>
</table>
    
    
    
    
    
    
<exercise id="fs-id14318779">
<problem id="fs-id14318781">
    <para id="id2261975">Illustrate the following codes on a binary tree. Which of them
are instantaneously decodable? Which can be pruned and remain instantaneously decodable?</para>
    <equation id="id2261988"><m:math overflow="scroll" mode="display">
<m:mtable>
<m:mtr>
<m:mtd>
          <m:msub>
            <m:mi>S</m:mi>
            <m:mn>0</m:mn>
          </m:msub>
</m:mtd>
<m:mtd>
   <m:msub>
            <m:mi>S</m:mi>
            <m:mn>1</m:mn>
          </m:msub>
</m:mtd>
<m:mtd>
          <m:msub>
            <m:mi>S</m:mi>
            <m:mn>2</m:mn>
          </m:msub>
       </m:mtd>
<m:mtd>
   <m:msub>
            <m:mi>S</m:mi>
            <m:mn>3</m:mn>
          </m:msub>
</m:mtd>
<m:mtd>       
   <m:msub>
            <m:mi>S</m:mi>
            <m:mn>4</m:mn>
          </m:msub>
</m:mtd>
</m:mtr>

<m:mtr>
<m:mtd>
<m:mn>011</m:mn>
</m:mtd>
<m:mtd>
<m:mn>100</m:mn>
</m:mtd>
<m:mtd>
<m:mn>00</m:mn>
</m:mtd>
<m:mtd>
<m:mn>11</m:mn>
</m:mtd>
<m:mtd>
<m:mn>101</m:mn>
</m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
<m:mn>011</m:mn>
</m:mtd>
<m:mtd>
<m:mn>100</m:mn>
</m:mtd>
<m:mtd>
<m:mn>00</m:mn>
</m:mtd>
<m:mtd>
<m:mn>0</m:mn>
</m:mtd>
<m:mtd>
<m:mn>01</m:mn>
</m:mtd>
</m:mtr>
<m:mtr>
<m:mtd>
<m:mn>010</m:mn>
</m:mtd>
<m:mtd>
<m:mn>000</m:mn>
</m:mtd>
<m:mtd>
<m:mn>100</m:mn>
</m:mtd>
<m:mtd>
<m:mn>101</m:mn>
</m:mtd>
<m:mtd>
<m:mn>111</m:mn>
<m:mo>.</m:mo>
</m:mtd>
</m:mtr>
</m:mtable>       
</m:math>
    </equation>
    
    
    
</problem>
</exercise>
    <para id="id2262094">Code #2 generated in <link target-id="eip-497">Table 2</link> seems like a better code than code #5 because its average number of bits/symbol (2.4) is smaller. But what if symbol <m:math>
<m:msub>
<m:mi>S</m:mi>
<m:mn>0</m:mn>
</m:msub>
</m:math> is a very likely symbol and symbol <m:math>
<m:msub>
<m:mi>S</m:mi>
<m:mn>4</m:mn>
</m:msub>
</m:math> is a very unlikely one? Then it may well turn out that the average number of bits used by code #5 is less than the average number used by code #2. So what is the best code? The answer depends on the relative frequency of use for each symbol. We explore this question in the next section.
</para>
  </content>
</document>